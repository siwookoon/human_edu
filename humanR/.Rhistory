x     = diapl,
y     = cty,
title = "Distribution of sepal length across Iris species"
)
install.packages("ggstatsplot")
install.packages("ggstatsplot")
ggbetweenstats(
data  = mpg,
x     = diapl,
y     = cty,
title = "Distribution of sepal length across Iris species"
)
title = "Understanding mammalian sleep"
install.packages("ggstatsplot")
ggscatterstats(
x     = displ,
xlab  = "REM sleep (in hours)",
title = "Understanding mammalian sleep"
ggscatterstats(
data  = ggplot::mpg,
x     = displ,
y     = cty,
xlab  = "REM sleep (in hours)",
ylab  = "Amount of time spent awake (in hours)",
title = "Understanding mammalian sleep"
)
ggscatterstats(
data  = ggplot::mpg,
x     = displ,
y     = cty,
xlab  = "REM sleep (in hours)",
ylab  = "Amount of time spent awake (in hours)",
title = "Understanding mammalian sleep"
)
install.packages("ggstatsplot")
ggscatterstats(
data  = ggplot::mpg,
x     = displ,
y     = cty,
xlab  = "REM sleep (in hours)",
ylab  = "Amount of time spent awake (in hours)",
title = "Understanding mammalian sleep"
)
library(ggstatsplot)
ggscatterstats(
data  = ggplot::mpg,
x     = displ,
y     = cty,
xlab  = "REM sleep (in hours)",
ylab  = "Amount of time spent awake (in hours)",
title = "Understanding mammalian sleep"
)
library(ggplot2)
ggscatterstats(
data  = ggplot::mpg,
x     = displ,
y     = cty,
xlab  = "REM sleep (in hours)",
ylab  = "Amount of time spent awake (in hours)",
title = "Understanding mammalian sleep"
)
ggscatterstats(
data  = mpg,
x     = displ,
y     = cty,
xlab  = "REM sleep (in hours)",
ylab  = "Amount of time spent awake (in hours)",
title = "Understanding mammalian sleep"
)
install.packages("shiny")
install.packages("shiny")
library(ggplot2)
ggscatterstats(
data  = mpg,
x     = displ,
y     = cty,
xlab  = "REM sleep (in hours)",
ylab  = "Amount of time spent awake (in hours)",
title = "Understanding mammalian sleep"
)
runExample("01_hello")
library(shiny)
runExample("01_hello")
# 데이터 가공
# dplyr
library(dplyr)
str(iris)
# filter 조건문, 행추출
#Sepal.length가 5 이상인 데이터 추출
# %>% 연결 연산자
data2 = iris %>% filter(Sepal.length >= 5)
# filter 조건문, 행추출
#Sepal.length가 5 이상인 데이터 추출
# %>% 연결 연산자
data2 = iris %>% filter(Sepal.Length >= 5)
# 데이터 가공
# dplyr
library(dplyr)
data("iris")
str(iris)
# filter 조건문, 행추출
#Sepal.length가 5 이상인 데이터 추출
# %>% 연결 연산자
data2 = iris %>% filter(Sepal.Length >= 5)
# filter 조건문, 행추출
#Sepal.length가 5 이상인 데이터 추출
# %>% 연결 연산자
data2 = iris %>%
filter(Sepal.Length >= 5)
data2 = iris %>%
filter(Sepal.Length >= 5) %>%
select(Sepal.Length, Petal.Length, Species)
avg = mean(Sepal.Length)
# 데이터 가공
# dplyr
library(dplyr)
data("iris")
str(iris)
# filter 조건문, 행추출
# filter 조건문, 행추출
#Sepal.length가 5 이상인 데이터 추출
# %>% 연결 연산자
data2 = iris %>%
select(Sepal.Length, Petal.Length, Species) %>%
summarise(total = sum(Sepal.Length),
avg = mean(Sepal.Length)
avg = mean(Sepal.Length)
data2 = iris %>%
filter(Sepal.Length >= 5) %>%
select(Sepal.Length, Petal.Length, Species) %>%
group_by(Spesies) %>%
summarise(total = sum(Sepal.Length),
avg = mean(Sepal.Length))
# 데이터 가공
# dplyr
library(dplyr)
data("iris")
str(iris)
data2 = iris %>%
filter(Sepal.Length >= 5) %>%
select(Sepal.Length, Petal.Length, Species) %>%
group_by(Spesies) %>%
summarise(total = sum(Sepal.Length),
avg = mean(Sepal.Length))
data2 = iris %>%
filter(Sepal.Length >= 5) %>%
select(Sepal.Length, Petal.Length, Species) %>%
group_by(Spesies) %>%
summarise(total = sum(Sepal.Length),
avg = mean(Sepal.Length))
data2 = iris %>%
filter(Sepal.Length >= 5) %>%
select(Sepal.Length, Petal.Length, Species) %>%
group_by(Species) %>%
summarise(total = sum(Sepal.Length),
avg = mean(Sepal.Length))
ID
ID = c("A","B","C")
ID = c("A","B","C")
ID
plot(cars)
ID = c("A","B","C")
ID
ID = c(1,2,3)
ID
library(ggplot2)
# install.packages("readxl")
```
# install.packages("readxl")
```
# install.packages("readxl")
```
# install.packages("readxl")
```
install.packages("readxl")
install.packages("writexl")
ggplot(data, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
library(ggplot2)
# install.packages("readxl")
# install.pakckages("writexl")
data = iris
ggplot(data, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
ggplot(data, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
write.csv(data, file = "iris.csv")
library(writexl)
write_xlsx(iris, path = "iris.xlsx")
iris2 = read.csv(file = "iris.csv")
str(iris2)
library(readxl)
iris3 = read_xlsx(path = "iris.xlsx")
library(readxl)
iris3 = read_xlsx(path = "iris.xlsx")
head(iris3)
library(readxl)
iris3 = read_xlsx(path = "iris.xlsx")
head(iris3)
head(iris3)
library(readxl)
iris3 = read_xlsx(path = "iris.xlsx")
head(iris3)
load("C:/Users/h/Desktop/HelloR/README.md")
library(readxl)
# Sample1 엑셀 파일을 불러와서 exdata1 데이터 세트로 저장
# exdata1 <- read_excel("C:/Rstudy/Sample1.xlsx")
exdata1 <- read_excel("C:/Rstudy/Sample1.xlsx")
# Sample1 엑셀 파일을 불러와서 exdata1 데이터 세트로 저장
# exdata1 <- read_excel("C:/Rstudy/Sample1.xlsx")
exdata1 <- read_excel("Sample1.xlsx")
getwd()
setwd("C:/Users/h/Desktop/humanR/Code/Chapter05")
# Sample1 엑셀 파일을 불러와서 exdata1 데이터 세트로 저장
# exdata1 <- read_excel("C:/Rstudy/Sample1.xlsx")
exdata1 <- read_excel("Sample1.xlsx")
str(exdata1)
# 라이브러리 설치
# install.packages("패키지명")
# load 라이브러리
# 파이썬 라이브러리 숫자가 20만개 넘음
# R, 2만개 미만.
library(ggplot2)
# 데이터 가공
# dplyr
library(dplyr)
p <- ggplot(mpg, aes(displ, cty))
p + geom_point()
p + geom_point(aes(colour = factor(cyl)))
p <- ggplot(mpg, aes(displ, cty))
p + geom_point()
p + geom_point(aes(colour = factor(cyl)))
data2 = iris %>%
filter(Sepal.Length >= 5) %>%
select(Sepal.Length, Petal.Length, Species) %>%
group_by(Species) %>%
summarise(total = sum(Sepal.Length),
avg = mean(Sepal.Length))
data2
library(dplyr) # dplyr 패키지 로드
library(readxl)
# Sample1 엑셀 파일을 불러와서 exdata1 데이터 세트로 저장
# exdata1 <- read_excel("C:/Rstudy/Sample1.xlsx")
exdata1 <- read_excel("Sample1.xlsx")
str(exdata1)
library(dplyr) # dplyr 패키지 로드
library(readxl)
# Sample1 엑셀 파일을 불러와서 exdata1 데이터 세트로 저장
# exdata1 <- read_excel("C:/Rstudy/Sample1.xlsx")
exdata1 <- read_excel("Sample1.xlsx")
# exdata1 데이터 세트에서 AMT17 변수명을 Y17_AMT, AMT16 변수명을 Y16_AMT로 변경
# rename("테이터셋, 바꿀변수명 = 기존변수명")
exdata1 <- rename(exdata1, Y17_AMT = AMT17, Y16_AMT = AMT16)
View(exdata1) # exdata1 데이터 세트 확인
# Sample1 엑셀 파일을 불러와서 exdata1 데이터 세트로 저장
exdata1 <- read_excel("C:/Rstudy/Sample1.xlsx")
install.packages("dplyr") # dplyr 패키지 설치
install.packages("dplyr")
install.packages("dplyr")
library(dplyr) # dplyr 패키지 로드
library(readxl)
# Sample1 엑셀 파일을 불러와서 exdata1 데이터 세트로 저장
exdata1 <- read_excel("C:/Rstudy/Sample1.xlsx")
ID = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
NAME = c("최유진", "마시로", "샤오팅", "김채형", "김다연", "히카루", "바히에", "서영은", "강예서")
AGE = c(25, 22, 22, 20, 19, 18, 17, 17, 16)
NATION = c("한국", "일본", "중국", "한국", "한국", "일본", "한국/미국", "한국", "한국")
POSITION = c("리더", "부리더", "메인댄서", "메인보컬", "메인댄서", "메인래퍼", "서브보컬", "메인보컬", "서브댄서")
kepler = data.frame(
"ID"       = ID,
"NAME"     = NAME,
"AGE"      = AGE,
"NATION"   = NATION,
"POSITION" = POSITION
)
str(kepler)
dim(kepler)
ls(kepler)
head(kepler)
head(kepler)
```
install.packages("writexl")
install.packages("readxl")
```
- 데이터 세트를 csv 파일로 저장한다.
+ 파일명 : `kepler.csv`
install.packages("readxl")
write.csv(kepler, file = 'kepler.csv')
write_xlsx(kepler, path = 'kepler.xlsx')
library(writexl)
write_xlsx(kepler, path = 'kepler.xlsx')
write_xlsx(kepler, path = 'kepler.xlsx')
kepler1 = read_xlsx(path = "kepler.xlsx")
str(kepler1)
library(readxl)
kepler1 = read_xlsx(path = "kepler.xlsx")
str(kepler1)
kepler2 = read.csv(file = "kepler.csv")
str(kepler2)
library(dplyr)
result = kepler1 %>% rename("출생지" = "NATION")
str(result)
kepler1 %>% select(NAME, AGE)
kepler1 %>% filter(출생지=="일본")
kepler1 %>% select(NAME, AGE)
kepler1 %>% select(NAME, AGE)
kepler1 %>% filter(NATION=="일본")
kepler1 %>% select(NAME, AGE)
kepler1 %>% select(NAME, AGE)
- kepler1 데이터 세트에서 “출생지”가 일본인 멤버를 추출하는 코드를 작성하시오.[5]
```{r}
kepler1 %>% filter(NATION=="일본")
kepler1 %>% filter(NATION=="일본")
library(dplyr)
result = kepler1 %>% rename("출생지" = "NATION")
str(result)
str(result)
result = kepler1 %>% rename("출생지" = "NATION")
str(result)
result = kepler1 %>% rename("출생지" = "NATION")
str(result)
```
kepler1 %>% select(NAME, AGE)
kepler1 %>% filter(NATION=="일본")
kepler1 %>% filter(NATION=='일본')
kepler1 %>% filter(POSITION=='메인보컬'& AGE>=20)
kepler1 %>% filter(POSITION=='메인보컬'& AGE<=20)
library(ggplot2)
kepler1
hist(kepler1$AGE)
data("mpg", package = "ggplot2")
mpg %>%
arrange(desc(cty)) %>%
head(n = 6)
data("mpg", package = "ggplot2")
mpg %>% arrange(AGE, desc)
mpg %>% arrange(AGE, desc(cty))
mpg %>% arrange(AGE,ID,NAME,NATION,POSITION,TITLE, desc(cty))
mpg %>% arrange(A,AGE, desc(cty))
mpg %>% arrange(AGE, desc(cty))
mpg %>% arrange(.,AGE, desc(cty))
dplyr:::arrange.data.frame(., AGE, desc(cty))
mpg %>% arrange(cty, desc(AGE))
mpg %>% arrange(desc(AGE))
mpg %>% arrange(desc(cty))
mpg %>% arrange(AGE desc(cty))
mpg %>% arrange(AGE, desc(cty))
AGE %>% arrange(desc(cty))
mpg %>% arrange(desc(cty), AGE)
mpg %>% arrange(AGE,desc(cty))
# exdata1 데이터 세트의 AGE 변수는 오름차순, Y17_AMT 변수는 내림차순 정렬
exdata1 %>% arrange(AGE, desc(Y17_AMT))
mpg %>% arrange(AGE, desc(cty))
mpg %>% arrange(AGE(num), desc(cty))
mpg %>% arrange(AGE, desc(cty))
mpg %>% arrange(desc(AGE_cty))
mpg %>% arrange(AGE, desc(cty))
mpg %>% arrange(desc(AGE))
mpg %>% arrange(cty, desc(AGE))
cty %>% arrange(desc(AGE))
mpg %>% arrange(desc(cty)) %>% AGE
mpg %>% arrange(desc(cty)) %>% arrange(AGE)
mpg %>% filter(AGE)
mpg %>% filter(AGE$cty)
data("mpg", package = "ggplot2")
mpg %>%
arrange(desc(cty)) %>%
head(n = 6)
data("mpg", package = "ggplot2")
force(mpg)
data("mpg", package = "ggplot2")
mpg %>% AGE %>% arrange(desc(cty))
data("mpg", package = "ggplot2")
mpg %>%
arrange(desc(cty)) %>%
head(n = 6)
View(mpg)
mpg %>% arrange(class, desc(cty))
mpg %>% arrange(2seater, desc(cty))
class %>% arrange(desc(cty))
mpg %>% arrange(desc(cty)) %>% class
mpg %>% class %>% arrange(desc(cty))
group_by(class) %>%
summarise(desc(cty))
group_by(class) %>%
summarise(class = desc(cty))
group_by(class) %>%
summarise(avg = desc(cty))
class(desc(avg))
class(desc(cty))
group_by(class) %>%
summarise(avg = mean(cty)) %>%
arrange(desc(avg))
group_by(class) %>%
summarise(avg = mean(cty))
group_by(class) %>%
summarise(avg = mean(cty)) %>%
arrange(desc(avg))
mpg %>% group_by(class) %>%
summarise(avg = mean(cty)) %>%
arrange(desc(avg))
library(dplyr)
library(ggplot2)
# 데이터 불러오기
data(iris)
str(iris)
iris %>% select(Species)
iris %>% select(Species) %>% head()
ggplot(avg, aes(x, y = desc(avg)) + geom_point()
data("mpg", package = "ggplot2")
mpg %>%
arrange(desc(cty)) %>%
head(n = 6)
mpg %>% group_by(class) %>%
summarise(avg = mean(cty)) %>%
arrange(desc(avg))
ggplot(avg, aes(x, y = desc(avg)) + geom_point()
ggplot(avg, aes(x, y = desc(avg)) + geom_point()
ggplot2(avg, aes(x, y = desc(avg)) + geom_point()
ggplot2(avg, aes(x, y = desc(avg)) + geom_point()
iris %>%
rename("종" = "Sepecies") %>% head()
library(dplyr)
library(ggplot2)
# 데이터 불러오기
data(iris)
str(iris)
iris %>%
rename("종" = "Sepecies") %>% head()
iris %>%
rename("종" = "Sepecies") %>% head()
iris %>%
rename("종" = "Sepecies") %>% head()
library(dplyr)
library(ggplot2)
# 데이터 불러오기
data(iris)
str(iris)
iris %>%
rename("종" = "Sepecies") %>% head()
library(dplyr)
library(ggplot2)
# 데이터 불러오기
data(iris)
str(iris)
iris %>% rename("종" = "Sepecies") %>% head()
filter(Sepal.Length == 5.1 | Sepal.Width == 3.0)
library(dplyr)
library(ggplot2)
# 데이터 불러오기
data(iris)
str(iris)
iris %>% rename("종" = "Sepecies") %>% head()
iris %>% head()
filter(Sepal.Length == 5.1 | Sepal.Width == 3.0)
iris %>% head() %>%
filter(Sepal.Length == 5.1 | Sepal.Width == 3.0)
mp =mpg %>% group_by(class) %>%
summarise(avg = mean(cty)) %>%
arrange(desc(avg))
mp = mpg %>% group_by(class) %>%
summarise(avg = mean(cty)) %>%
arrange(desc(avg))
mp
ggplot(mp, aes(x, y = desc(avg)) + geom_point()
ggplot(mp, aes(x = desc(avg)) + geom_point()
data("mpg", package = "ggplot2")
data("mpg", package = "ggplot2")
mpg %>%
arrange(desc(cty)) %>%
head(n = 6)
mp = mpg %>% group_by(class) %>%
summarise(avg = mean(cty)) %>%
arrange(desc(avg))
#ggplot(mp, aes(x = desc(avg)) + geom_bar()
```
ggplot(mp, aes(x = desc(avg)) + geom_bar()
ggplot(mp, aes(x = desc(avg)) + geom_bar()
ggplot(mp = aes(x = desc(avg)) + geom_bar()
ggplot(mp = aes(x = "desc(avg)") + geom_bar()
geom_bar(aes(desc(avg)))
g + geom_bar(aes(desc(avg)))
mp + geom_bar(aes(desc(avg)))
mp <- geom_bar(aes(desc(avg)))
mp <- geom_bar(aes(desc(avg)))
mp <- ggplot(mp, aes(desc(avg)))
mp + geom_bar()
mp <- ggplot(mp, aes(avg))
ggplot(mp, aes(avg)) + geom_bar()
data("mpg", package = "ggplot2")
mpg %>%
arrange(desc(cty)) %>%
head(n = 6)
mp = mpg %>% group_by(class) %>%
summarise(avg = mean(cty)) %>%
arrange(desc(avg))
mp
ggplot(mp, aes(avg)) + geom_bar()
ggplot(mp, aes(avg) + geom_bar()
ggplot(mpg, aes(avg)) + geom_bar()
ggplot(mp, aes(avg)) + geom_bar()
mp = mpg %>% group_by(class) %>%
summarise(avg = mean(cty)) %>%
mp
mp = mpg %>% group_by(class) %>%
summarise(avg = mean(cty)) %>%
arrange(desc(avg))
mp = mpg %>% group_by(class) %>%
summarise(avg = mean(cty)) %>%
#arrange(desc(avg))
mp
mp = mpg %>% group_by(class) %>%
summarise(avg = mean(cty)) %>%
arrange(desc(avg))
mp
